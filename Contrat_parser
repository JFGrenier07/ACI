#!/usr/bin/env python3
"""
ACI Contract Visualizer - API REST Native

Ce script permet de visualiser et analyser les contrats ACI (Application Centric Infrastructure)
en se connectant directement aux contrôleurs APIC via l'API REST native.

Le script offre deux modes principaux :
1. Génération de rapports complets par fabric
2. Consultation interactive des contrats par tenant

Author: JFG
Version: 1.0
Compatible: Python 3.6+
Dependencies: requests, urllib3
"""

import os
import json
import getpass
import requests
import urllib3
from datetime import datetime

# Désactiver les warnings SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

FABRICS = [
    {"name": "Simulateur", "ip": "192.168.0.245"},
    {"name": "DC2-FabricB", "ip": "10.2.2.10"},
    {"name": "Lab-Fabric", "ip": "192.168.100.50"},
]

EXCLUDED_TENANTS = {"mgmt", "infra", "common"}


class ACISession:
    """
    Classe pour gérer les sessions d'authentification et les requêtes vers l'APIC.
    
    Cette classe encapsule la logique d'authentification et les appels API
    vers les contrôleurs APIC Cisco ACI.
    
    Attributes:
        apic_url (str): URL de base de l'APIC
        username (str): Nom d'utilisateur pour l'authentification
        password (str): Mot de passe pour l'authentification
        session (requests.Session): Session HTTP réutilisable
        cookies (requests.cookies.RequestsCookieJar): Cookies de session après authentification
    """
    
    def __init__(self, apic_url, username, password):
        """
        Initialise une nouvelle session ACI.
        
        Args:
            apic_url (str): URL de l'APIC (ex: https://192.168.1.100)
            username (str): Nom d'utilisateur APIC
            password (str): Mot de passe APIC
        """
        self.apic_url = apic_url.rstrip('/')
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.session.verify = False
        self.cookies = None
        
    def login(self):
        """
        Effectue l'authentification sur l'APIC.
        
        Utilise l'endpoint aaaLogin pour obtenir un token de session
        valide pour les requêtes suivantes.
        
        Returns:
            bool: True si l'authentification réussit, False sinon
            
        Raises:
            Exception: En cas d'erreur de connexion réseau
        """
        login_url = f"{self.apic_url}/api/aaaLogin.json"
        payload = {
            "aaaUser": {
                "attributes": {
                    "name": self.username,
                    "pwd": self.password
                }
            }
        }
        
        try:
            response = self.session.post(login_url, json=payload, timeout=30)
            if response.status_code == 200:
                self.cookies = response.cookies
                return True
            else:
                print(f"Erreur d'authentification: {response.status_code}")
                return False
        except Exception as e:
            print(f"Erreur de connexion: {e}")
            return False
    
    def get(self, url_path):
        """
        Effectue une requête GET sur l'API ACI.
        
        Args:
            url_path (str): Chemin de l'API (ex: /node/class/fvTenant.json)
            
        Returns:
            dict: Réponse JSON de l'API ou None en cas d'erreur
            
        Raises:
            Exception: En cas d'erreur de requête
        """
        url = f"{self.apic_url}/api{url_path}"
        try:
            response = self.session.get(url, cookies=self.cookies, timeout=30)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"Erreur API: {response.status_code} - {url}")
                return None
        except Exception as e:
            print(f"Erreur requête: {e}")
            return None


# --- Utilitaires ---
def choose_fabric():
    """
    Affiche un menu de sélection des fabrics ACI disponibles.
    
    Permet à l'utilisateur de choisir parmi les fabrics configurées
    dans la liste FABRICS.
    
    Returns:
        dict: Dictionnaire contenant les informations du fabric sélectionné
              avec les clés 'name' et 'ip'
    """
    print("\n=== Sélectionnez un fabric ===")
    for idx, f in enumerate(FABRICS, 1):
        print(f"{idx}. {f['name']} ({f['ip']})")
    while True:
        try:
            choice = int(input("\nEntrez le numéro du fabric : ").strip())
            if 1 <= choice <= len(FABRICS):
                return FABRICS[choice - 1]
        except ValueError:
            pass
        print("Choix invalide.")


def ask_yes_no(prompt):
    """
    Affiche une question oui/non et retourne la réponse booléenne.
    
    Args:
        prompt (str): Question à poser à l'utilisateur
        
    Returns:
        bool: True pour oui, False pour non
    """
    while True:
        ans = input(prompt).strip().lower()
        if ans in {"o", "oui", "y", "yes"}:
            return True
        if ans in {"n", "non", "no"}:
            return False
        print("Répondez par oui/non.")


def get_tenants(session):
    """
    Récupère la liste des tenants avec leurs VRFs associés.
    
    Exclut automatiquement les tenants système (mgmt, infra, common)
    et enrichit chaque tenant avec la liste de ses VRFs.
    
    Args:
        session (ACISession): Session authentifiée vers l'APIC
        
    Returns:
        list: Liste de dictionnaires contenant les informations des tenants
              Format: [{'name': str, 'dn': str, 'vrfs': list}, ...]
    """
    data = session.get("/node/class/fvTenant.json")
    if not data:
        return []
    
    tenants = []
    for item in data.get("imdata", []):
        tenant_name = item["fvTenant"]["attributes"]["name"]
        if tenant_name not in EXCLUDED_TENANTS:
            tenant_dn = item["fvTenant"]["attributes"]["dn"]
            vrfs = get_tenant_vrfs(session, tenant_dn)
            tenants.append({
                "name": tenant_name,
                "dn": tenant_dn,
                "vrfs": vrfs
            })
    return tenants


def get_tenant_vrfs(session, tenant_dn):
    """
    Récupère les VRFs (Virtual Routing and Forwarding) d'un tenant spécifique.
    
    Args:
        session (ACISession): Session authentifiée vers l'APIC
        tenant_dn (str): Distinguished Name du tenant
        
    Returns:
        list: Liste de dictionnaires contenant les informations des VRFs
              Format: [{'name': str, 'dn': str}, ...]
    """
    data = session.get(f"/node/mo/{tenant_dn}.json?query-target=children&target-subtree-class=fvCtx")
    if not data:
        return []
    
    vrfs = []
    for item in data.get("imdata", []):
        vrfs.append({
            "name": item["fvCtx"]["attributes"]["name"],
            "dn": item["fvCtx"]["attributes"]["dn"]
        })
    return vrfs


def get_contracts(session, tenant_dn):
    """
    Récupère la liste des contrats d'un tenant.
    
    Les contrats définissent les politiques de communication entre EPGs
    dans l'infrastructure ACI.
    
    Args:
        session (ACISession): Session authentifiée vers l'APIC
        tenant_dn (str): Distinguished Name du tenant
        
    Returns:
        list: Liste de dictionnaires contenant les informations des contrats
              Format: [{'name': str, 'dn': str}, ...]
    """
    data = session.get(f"/node/mo/{tenant_dn}.json?query-target=children&target-subtree-class=vzBrCP")
    if not data:
        return []
    
    contracts = []
    for item in data.get("imdata", []):
        contracts.append({
            "name": item["vzBrCP"]["attributes"]["name"],
            "dn": item["vzBrCP"]["attributes"]["dn"]
        })
    return contracts


def get_contract_relationships(session, contract_dn):
    """
    Récupère les relations provider/consumer d'un contrat.
    
    Un contrat ACI définit les communications autorisées entre EPGs :
    - Providers : EPGs qui fournissent des services
    - Consumers : EPGs qui consomment des services
    
    Args:
        session (ACISession): Session authentifiée vers l'APIC
        contract_dn (str): Distinguished Name du contrat
        
    Returns:
        tuple: (providers, consumers) où chaque élément est une liste
               de dictionnaires d'informations EPG
    """
    providers = []
    consumers = []
    
    # Récupérer les relations du contrat
    data = session.get(f"/node/mo/{contract_dn}.json?query-target=children&target-subtree-class=vzRtProv,vzRtCons")
    if not data:
        return providers, consumers
    
    for item in data.get("imdata", []):
        if "vzRtProv" in item:
            # Relation provider
            target_dn = item["vzRtProv"]["attributes"]["tDn"]
            epg_info = get_epg_info(session, target_dn)
            if epg_info:
                providers.append(epg_info)
        elif "vzRtCons" in item:
            # Relation consumer
            target_dn = item["vzRtCons"]["attributes"]["tDn"]
            epg_info = get_epg_info(session, target_dn)
            if epg_info:
                consumers.append(epg_info)
    
    return providers, consumers


def get_epg_info(session, epg_dn):
    """
    Récupère les informations détaillées d'un EPG (interne ou externe).
    
    Détermine automatiquement le type d'EPG (interne ou externe) basé sur
    le Distinguished Name et récupère les informations appropriées.
    
    Args:
        session (ACISession): Session authentifiée vers l'APIC
        epg_dn (str): Distinguished Name de l'EPG
        
    Returns:
        dict: Informations de l'EPG ou None si non trouvé
              Format: {'name': str, 'type': str, 'dn': str, 'subnets': list}
    """
    # Vérifier si c'est un EPG interne ou externe
    if "/out-" in epg_dn:
        # EPG externe (Outside EPG)
        data = session.get(f"/node/mo/{epg_dn}.json")
        if not data or not data.get("imdata"):
            return None
            
        epg_data = data["imdata"][0]["l3extInstP"]["attributes"]
        subnets = get_external_subnets(session, epg_dn)
        
        return {
            "name": epg_data["name"],
            "type": "external",
            "dn": epg_dn,
            "subnets": subnets
        }
    else:
        # EPG interne
        data = session.get(f"/node/mo/{epg_dn}.json")
        if not data or not data.get("imdata"):
            return None
            
        epg_data = data["imdata"][0]["fvAEPg"]["attributes"]
        subnets = get_internal_subnets(session, epg_dn)
        
        return {
            "name": epg_data["name"],
            "type": "internal",
            "dn": epg_dn,
            "subnets": subnets
        }


def get_internal_subnets(session, epg_dn):
    """
    Récupère les subnets d'un EPG interne via son Bridge Domain.
    
    Les EPGs internes obtiennent leurs subnets via le Bridge Domain
    auquel ils sont associés.
    
    Args:
        session (ACISession): Session authentifiée vers l'APIC
        epg_dn (str): Distinguished Name de l'EPG interne
        
    Returns:
        list: Liste de dictionnaires contenant les informations des subnets
              Format: [{'ip': str, 'description': str, 'type': str}, ...]
    """
    subnets = []
    
    # Récupérer le Bridge Domain de l'EPG
    data = session.get(f"/node/mo/{epg_dn}.json?query-target=children&target-subtree-class=fvRsBd")
    if not data or not data.get("imdata"):
        return subnets
    
    bd_dn = data["imdata"][0]["fvRsBd"]["attributes"]["tDn"]
    
    # Récupérer les subnets du Bridge Domain
    subnet_data = session.get(f"/node/mo/{bd_dn}.json?query-target=children&target-subtree-class=fvSubnet")
    if subnet_data and subnet_data.get("imdata"):
        for item in subnet_data["imdata"]:
            subnet_attrs = item["fvSubnet"]["attributes"]
            subnets.append({
                "ip": subnet_attrs["ip"],
                "description": subnet_attrs.get("descr", ""),
                "type": "internal"
            })
    
    return subnets


def get_external_subnets(session, ext_epg_dn):
    """
    Récupère les subnets d'un EPG externe avec distinction ext/exp.
    
    Les EPGs externes peuvent avoir des subnets de deux types :
    - ext : Subnets externes standard
    - exp : Subnets avec export route control
    
    Args:
        session (ACISession): Session authentifiée vers l'APIC
        ext_epg_dn (str): Distinguished Name de l'EPG externe
        
    Returns:
        list: Liste de dictionnaires contenant les informations des subnets
              Format: [{'ip': str, 'description': str, 'type': str}, ...]
    """
    subnets = []
    
    data = session.get(f"/node/mo/{ext_epg_dn}.json?query-target=children&target-subtree-class=l3extSubnet")
    if data and data.get("imdata"):
        for item in data["imdata"]:
            subnet_attrs = item["l3extSubnet"]["attributes"]
            
            # Déterminer le type de subnet externe
            scope = subnet_attrs.get("scope", "")
            subnet_type = "exp" if "export-rtctrl" in scope else "ext"
            
            subnets.append({
                "ip": subnet_attrs["ip"],
                "description": subnet_attrs.get("descr", ""),
                "type": subnet_type
            })
    
    return subnets


def get_epg_vrf(session, epg_dn):
    """
    Récupère le VRF associé à un EPG (interne ou externe).
    
    Pour les EPGs externes, remonte via le L3Out.
    Pour les EPGs internes, remonte via le Bridge Domain.
    
    Args:
        session (ACISession): Session authentifiée vers l'APIC
        epg_dn (str): Distinguished Name de l'EPG
        
    Returns:
        str: Nom du VRF ou "Unknown" si non trouvé
    """
    if "/out-" in epg_dn:
        # Pour les External EPGs, récupérer via L3Out
        l3out_dn = epg_dn.split("/instP-")[0]
        data = session.get(f"/node/mo/{l3out_dn}.json?query-target=children&target-subtree-class=l3extRsEctx")
        if data and data.get("imdata"):
            vrf_dn = data["imdata"][0]["l3extRsEctx"]["attributes"]["tDn"]
            return vrf_dn.split("/")[-1].replace("ctx-", "")
    else:
        # Pour les EPGs internes, récupérer via Bridge Domain
        data = session.get(f"/node/mo/{epg_dn}.json?query-target=children&target-subtree-class=fvRsBd")
        if data and data.get("imdata"):
            bd_dn = data["imdata"][0]["fvRsBd"]["attributes"]["tDn"]
            bd_data = session.get(f"/node/mo/{bd_dn}.json?query-target=children&target-subtree-class=fvRsCtx")
            if bd_data and bd_data.get("imdata"):
                vrf_dn = bd_data["imdata"][0]["fvRsCtx"]["attributes"]["tDn"]
                return vrf_dn.split("/")[-1].replace("ctx-", "")
    
    return "Unknown"


def print_contract(session, contract, tenant_name):
    """
    Affiche les détails d'un contrat de manière formatée.
    
    Présente les informations du contrat avec ses providers et consumers
    dans un format lisible avec arborescence.
    
    Args:
        session (ACISession): Session authentifiée vers l'APIC
        contract (dict): Informations du contrat
        tenant_name (str): Nom du tenant propriétaire
    """
    print(f"\nTenant: {tenant_name}  |  Contrat: {contract['name']}\n")
    
    providers, consumers = get_contract_relationships(session, contract['dn'])
    
    def print_side(epgs, label):
        """Fonction interne pour afficher un côté du contrat."""
        for epg in epgs:
            epg_type = "Ext-EPG" if epg["type"] == "external" else "EPG"
            print(f"{label} {epg_type}-{epg['name']}")
            for subnet in epg["subnets"]:
                desc = f" ({subnet['description']})" if subnet['description'] else ""
                type_suffix = f" ({subnet['type']})" if subnet['type'] in ['ext', 'exp'] else ""
                print(f"    ├── {subnet['ip']}{desc}{type_suffix}")
    
    if providers:
        print("Providers:")
        print_side(providers, "├──")
    if consumers:
        print("Consumers:")
        print_side(consumers, "└──")
    if not providers and not consumers:
        print("Aucun EPG provider/consumer lié.")


def generate_enhanced_report(session, fabric_name):
    """
    Génère un rapport complet de tous les contrats du fabric.
    
    Crée un fichier texte détaillé contenant l'analyse complète de tous
    les contrats de tous les tenants du fabric, organisé en colonnes
    pour une lecture optimale.
    
    Args:
        session (ACISession): Session authentifiée vers l'APIC
        fabric_name (str): Nom du fabric pour nommer le fichier
        
    Returns:
        None: Génère un fichier de rapport sur le disque
    """
    filename = f"rapport_complet_{fabric_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    print("🔍 Collecte des données en cours...")
    
    with open(filename, "w", encoding="utf-8") as f:
        # En-tête du rapport
        f.write("=" * 85 + "\n")
        f.write(f"RAPPORT ACI CONTRACT VISUALIZER - FABRIC: {fabric_name.upper()}\n")
        f.write(f"Généré le: {datetime.now().strftime('%d/%m/%Y à %H:%M:%S')}\n")
        f.write("=" * 85 + "\n\n")
        
        tenants = get_tenants(session)
        total_contracts = 0
        total_providers = 0
        total_consumers = 0
        
        for tenant in sorted(tenants, key=lambda t: t["name"]):
            contracts = get_contracts(session, tenant["dn"])
            if not contracts:
                continue
                
            total_contracts += len(contracts)
            
            # En-tête Tenant avec VRFs
            vrf_list = ", ".join([vrf['name'] for vrf in tenant['vrfs']]) if tenant['vrfs'] else "Aucun VRF"
            f.write(f"TENANT: {tenant['name']:<32} VRFs: {vrf_list}\n")
            f.write("━" * 85 + "\n\n")
            
            for contract in sorted(contracts, key=lambda c: c["name"]):
                providers, consumers = get_contract_relationships(session, contract["dn"])
                
                if not providers and not consumers:
                    continue
                
                total_providers += len(providers)
                total_consumers += len(consumers)
                
                # En-tête du contrat
                f.write(f"CONTRACT: {contract['name']}\n")
                f.write(f"  {'PROVIDERS':<41} CONSUMERS\n")
                f.write("  " + "─" * 81 + "\n")
                
                # Créer des listes de lignes pour chaque côté
                provider_lines = []
                consumer_lines = []
                
                # Construire toutes les lignes pour providers
                for epg_idx, prov in enumerate(providers):
                    epg_type = "Ext-EPG" if prov["type"] == "external" else "EPG"
                    vrf = get_epg_vrf(session, prov["dn"])
                    provider_lines.append(f"  {epg_type}: {prov['name']} (VRF: {vrf})")
                    
                    if prov["subnets"]:
                        for subnet_idx, subnet in enumerate(prov["subnets"]):
                            desc = f" - {subnet['description']}" if subnet['description'] else ""
                            type_suffix = f" ({subnet['type']})" if subnet['type'] in ['ext', 'exp'] else ""
                            
                            if len(prov["subnets"]) == 1:
                                prefix = "    └─"
                            else:
                                prefix = "    ├─" if subnet_idx < len(prov["subnets"]) - 1 else "    └─"
                            
                            provider_lines.append(f"{prefix} {subnet['ip']}{type_suffix}{desc}")
                    else:
                        provider_lines.append("    └─ Aucun subnet")
                    
                    # Ligne vide entre EPGs (sauf pour le dernier)
                    if epg_idx < len(providers) - 1:
                        provider_lines.append("")
                
                # Construire toutes les lignes pour consumers
                for epg_idx, cons in enumerate(consumers):
                    epg_type = "Ext-EPG" if cons["type"] == "external" else "EPG"
                    vrf = get_epg_vrf(session, cons["dn"])
                    consumer_lines.append(f"{epg_type}: {cons['name']} (VRF: {vrf})")
                    
                    if cons["subnets"]:
                        for subnet_idx, subnet in enumerate(cons["subnets"]):
                            desc = f" - {subnet['description']}" if subnet['description'] else ""
                            type_suffix = f" ({subnet['type']})" if subnet['type'] in ['ext', 'exp'] else ""
                            
                            if len(cons["subnets"]) == 1:
                                prefix = "    └─"
                            else:
                                prefix = "    ├─" if subnet_idx < len(cons["subnets"]) - 1 else "    └─"
                            
                            consumer_lines.append(f"{prefix} {subnet['ip']}{type_suffix}{desc}")
                    else:
                        consumer_lines.append("    └─ Aucun subnet")
                    
                    # Ligne vide entre EPGs (sauf pour le dernier)
                    if epg_idx < len(consumers) - 1:
                        consumer_lines.append("")
                
                # Afficher les deux colonnes côte à côte
                max_lines = max(len(provider_lines), len(consumer_lines))
                
                for i in range(max_lines):
                    # Colonne Provider (41 caractères)
                    if i < len(provider_lines):
                        prov_content = provider_lines[i]
                        # Tronquer si trop long et ajouter des espaces pour atteindre 41 chars
                        if len(prov_content) > 41:
                            prov_content = prov_content[:38] + "..."
                        prov_formatted = f"{prov_content:<41}"
                    else:
                        prov_formatted = " " * 41
                    
                    # Colonne Consumer
                    if i < len(consumer_lines):
                        cons_content = consumer_lines[i]
                        f.write(f"{prov_formatted} {cons_content}\n")
                    else:
                        f.write(f"{prov_formatted}\n")
                
                f.write("\n")  # Espace entre les contrats
        
        # Résumé final
        f.write("━" * 85 + "\n\n")
        f.write("═" * 85 + "\n")
        f.write("RÉSUMÉ FINAL\n")
        f.write("═" * 85 + "\n")
        f.write(f"Total Tenants analysés: {len([t for t in tenants if get_contracts(session, t['dn'])])}\n")
        f.write(f"Total Contrats: {total_contracts}\n")
        f.write(f"Total EPGs Providers: {total_providers}\n")
        f.write(f"Total EPGs Consumers: {total_consumers}\n")
        f.write(f"Fabric: {fabric_name}\n")
        f.write("═" * 85 + "\n")
                    
    print(f"\n✅ Rapport complet généré : {filename}")
    print(f"📊 Total de {total_contracts} contrats analysés.")


def handle_no_contracts(tenant_name):
    """
    Gère le cas où aucun contrat n'est trouvé dans un tenant.
    
    Affiche un menu d'options pour permettre à l'utilisateur de choisir
    la prochaine action lorsqu'un tenant ne contient aucun contrat.
    
    Args:
        tenant_name (str): Nom du tenant sans contrats
        
    Returns:
        int: Choix de l'utilisateur (1, 2 ou 3)
             1: Sélectionner un autre tenant
             2: Revenir au menu principal
             3: Quitter l'application
    """
    print(f"\n⚠️  Aucun contrat trouvé dans le tenant '{tenant_name}'.")
    print("Options disponibles:")
    print("1. Sélectionner un autre tenant")
    print("2. Revenir au menu principal")
    print("3. Quitter")
    
    while True:
        try:
            choice = int(input("\nVotre choix : ").strip())
            if choice in [1, 2, 3]:
                return choice
        except ValueError:
            pass
        print("Choix invalide. Veuillez entrer 1, 2 ou 3.")


def main():
    """
    Fonction principale du programme.
    
    Présente le menu principal et orchestre l'exécution des différents
    modes de fonctionnement (rapport complet ou consultation interactive).
    Gère la boucle principale de l'application jusqu'à ce que l'utilisateur
    choisisse de quitter.
    
    Returns:
        None
    """
    while True:
        print("\n=== ACI Contract Visualizer (API REST Native) ===")
        print("1. Rapport complet des contrats pour une fabric par tenant")
        print("2. Consultation interactive")
        print("3. Quitter")
        
        while True:
            try:
                mode = int(input("\nVotre choix : ").strip())
                if mode in [1, 2, 3]:
                    break
            except ValueError:
                pass
            print("Choix invalide.")
        
        if mode == 3:
            print("👋 Au revoir.")
            break
        
        fabric = choose_fabric()
        username = input("Username : ").strip()
        password = getpass.getpass("Password : ")
        
        session = ACISession(f"https://{fabric['ip']}", username, password)
        if not session.login():
            print("❌ Connexion échouée.")
            continue
        
        if mode == 1:
            generate_enhanced_report(session, fabric["name"])
        else:
            # Mode consultation interactive
            while True:  # Boucle pour permettre de re-sélectionner un tenant
                tenants = get_tenants(session)
                if not tenants:
                    print("Aucun tenant disponible.")
                    break

                print("\n=== Sélectionnez un tenant ===")
                for idx, t in enumerate(tenants, 1):
                    print(f"{idx}. {t['name']}")
                    
                while True:
                    try:
                        tid = int(input("Numéro : ").strip())
                        if 1 <= tid <= len(tenants):
                            tenant = tenants[tid - 1]
                            break
                    except ValueError:
                        pass
                    print("Choix invalide.")

                contracts = get_contracts(session, tenant["dn"])
                if not contracts:
                    choice = handle_no_contracts(tenant["name"])
                    if choice == 1:
                        continue  # Re-sélectionner un tenant
                    elif choice == 2:
                        break  # Retour au menu principal
                    else:  # choice == 3
                        print("👋 Au revoir.")
                        return

                print("\n=== Sélectionnez un contrat ===")
                contracts_sorted = sorted(contracts, key=lambda x: x["name"])
                for idx, c in enumerate(contracts_sorted, 1):
                    print(f"{idx}. {c['name']}")
                    
                while True:
                    try:
                        cid = int(input("Numéro : ").strip())
                        if 1 <= cid <= len(contracts):
                            contract = contracts_sorted[cid - 1]
                            break
                    except ValueError:
                        pass
                    print("Choix invalide.")

                print_contract(session, contract, tenant["name"])
                
                if not ask_yes_no("\nVoulez-vous consulter un autre contrat/tenant ? (oui/non) : "):
                    break


if __name__ == "__main__":
    main()
