import requests
import json

requests.packages.urllib3.disable_warnings()

ENVIRONMENTS = {
    "1": {"name": "Sandbox", "ip": "10.10.20.14"},
    "2": {"name": "Home Lab", "ip": "192.168.0.200"},
}


class ACIClient:
    def __init__(self, host, username, password):
        self.host = host
        self.token = self._get_token(username, password)
        self.headers = {'Cookie': f'APIC-Cookie={self.token}'}

    def _get_token(self, username, password):
        url = f"https://{self.host}/api/aaaLogin.json"
        payload = {"aaaUser": {"attributes": {"name": username, "pwd": password}}}
        response = requests.post(url, json=payload, verify=False)
        return response.json()['imdata'][0]['aaaLogin']['attributes']['token']

    def get_data(self, url):
        response = requests.get(
            f"https://{self.host}{url}",
            headers=self.headers,
            verify=False
        )
        return response.json().get('imdata', [])


def select_item(items, prompt):
    if not items:
        raise ValueError(f"No {prompt} found")
    
    print(f"\nSelect {prompt}:")
    for idx, item in enumerate(items, 1):
        print(f"{idx}- {item}")
    
    while True:
        try:
            choice = int(input(f"Select {prompt} (1-{len(items)}): "))
            if 1 <= choice <= len(items):
                return items[choice - 1]
        except ValueError:
            print("Invalid choice. Please try again.")


def extract_aci_objects(data, object_type, parent_dn=None):
    objects = []
    for item in data:
        if object_type in item:
            if not parent_dn or parent_dn in item[object_type]['attributes']['dn']:
                objects.append(item[object_type]['attributes']['name'])
    return objects


def get_interfaces_and_bgp(data, base_path):
    interfaces = []
    bgp_peers = []

    for item in data:
        if base_path not in str(item):
            continue

        if 'l3extRsPathL3OutAtt' in item:
            attrs = item['l3extRsPathL3OutAtt']['attributes']
            interfaces.append({
                'IP Address': attrs.get('addr', 'N/A'),
                'Encapsulation': attrs.get('encap', 'N/A'),
                'Path': attrs.get('tDn', 'N/A'),
                'Interface Type': attrs.get('ifInstT', 'N/A')
            })

        elif 'bgpPeerP' in item:
            peer = item['bgpPeerP']['attributes']
            peer_dn = item['bgpPeerP']['attributes']['dn'].split('/peer-[')[0]
            
            local_as = next((i['bgpLocalAsnP']['attributes']['localAsn']
                           for i in data if 'bgpLocalAsnP' in i 
                           and peer_dn in i['bgpLocalAsnP']['attributes']['dn']), 'N/A')
            
            remote_as = next((i['bgpAsP']['attributes']['asn']
                            for i in data if 'bgpAsP' in i 
                            and peer_dn in i['bgpAsP']['attributes']['dn']), 'N/A')

            bgp_peers.append({
                'Neighbor': peer['addr'],
                'Local AS': local_as,
                'Remote AS': remote_as,
                'Admin State': peer['adminSt']
            })

    return interfaces, bgp_peers


def print_details(items, title, empty_msg="No items found"):
    print(f"\n{title}:")
    if not items:
        print(empty_msg)
        return
    
    for idx, item in enumerate(items, 1):
        print(f"\n{title.rstrip('s')} {idx}:")
        for key, value in item.items():
            print(f"  {key}: {value}")


def main():
    try:
        print("\nSelect Environment:")
        for key, env in ENVIRONMENTS.items():
            print(f"{key}- {env['name']} ({env['ip']})")
        
        env_choice = input("Enter your choice: ").strip()
        if env_choice not in ENVIRONMENTS:
            raise ValueError("Invalid environment selection")

        host = ENVIRONMENTS[env_choice]['ip']
        username = input("Enter username: ")
        password = input("Enter password: ")

        aci = ACIClient(host, username, password)

        # Get tenants and select one
        tenants = [t['fvTenant']['attributes']['name'] 
                  for t in aci.get_data("/api/node/class/fvTenant.json")]
        tenant = select_item(tenants, "tenant")

        # Get all tenant data
        tenant_data = aci.get_data(
            f"/api/node/mo/uni/tn-{tenant}.json?query-target=subtree"
        )

        # Select L3Out
        l3outs = extract_aci_objects(tenant_data, 'l3extOut')
        l3out = select_item(l3outs, "L3Out")

        # Select Node Profile
        node_path = f"/out-{l3out}/"
        node_profiles = extract_aci_objects(tenant_data, 'l3extLNodeP', node_path)
        node_profile = select_item(node_profiles, "Node Profile")

        # Select Interface Profile
        if_path = f"{node_path}lnodep-{node_profile}/"
        if_profiles = extract_aci_objects(tenant_data, 'l3extLIfP', if_path)
        if_profile = select_item(if_profiles, "Interface Profile")

        # Get interface and BGP details
        base_path = f"/tn-{tenant}{node_path}lnodep-{node_profile}/lifp-{if_profile}"
        interfaces, bgp_peers = get_interfaces_and_bgp(tenant_data, base_path)

        # Print results
        print_details(interfaces, "Interface Details")
        print_details(bgp_peers, "BGP Peer Connectivity Profiles")

    except Exception as e:
        print(f"Error: {str(e)}")


if __name__ == "__main__":
    main()
